<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024年春秋杯夏季赛复现</title>
    <url>/2024/07/13/2024%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%A4%8F%E5%AD%A3%E8%B5%9BCrypto%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="1-ezzzecc"><a href="#1-ezzzecc" class="headerlink" title="1.ezzzecc"></a>1.<strong>ezzzecc</strong></h3><p>题目附件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">a = getPrime(<span class="number">256</span>)</span><br><span class="line">b = getPrime(<span class="number">256</span>)</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">m = E.random_point()</span><br><span class="line">G = E.random_point()</span><br><span class="line">k = getPrime(<span class="number">18</span>)</span><br><span class="line">K = k * G</span><br><span class="line">r = getPrime(<span class="number">256</span>)</span><br><span class="line">c1 = m + r * K</span><br><span class="line"></span><br><span class="line">c2 = r * G</span><br><span class="line"></span><br><span class="line">cipher_left = s2n(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]) * m[<span class="number">0</span>]   <span class="comment">#flag的前半部分乘m[0]，所以只要用密文的除于m[0]即可得到flag前半部分</span></span><br><span class="line">cipher_right = s2n(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:]) * m[<span class="number">1</span>]   <span class="comment">#flag的后半部分点乘m[1]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = koZP3YQAklARRNrmYfjxoKIAXegOcG4jMOmKb08uESOkCCn72d6UM2NWgefYPEMq4EJ1M0jKaqt02Guo5Ubccjqg4QZaaHbScREx38UMLQKwG0LcDd8VFX1zkobc1ZQn4L3DhKQrgJZI55todgOdJuHN532bxScAvOF26gJyQclPtRHn3M6SHrRCEXzzmszd68PJlLB6HaabrRrCW9ZoAYSZetM5jDBtNCJLpR0CBZUUk3Oeh2MZQu2vk8DZ1QqNG49hlxGfawp1FXvAZPdMwixzkhEQnbCDcOKzYyT6BZF2Dfd940tazl7HNOswuIpLsqXQ2h56guGngMeYfMXEZV09fsB3TE0N934CLF8TbZnzFzEkOe8TPTK2mWPVSrgmbsGHnxgYWhaRQWg3yosgDfrEa5qfVl9De41PVtTw024gltovypMXK5XMhuhogs0EMN7hkLapLn6lMj</span><br><span class="line">p的格式为p=&#123;p&#125;</span><br><span class="line"></span><br><span class="line">a = <span class="number">87425770561190618633288232353256495656281438408946725202136726983601884085917</span></span><br><span class="line">b = <span class="number">107879772066707091306779801409109036008421651378615140327877558014536331974777</span></span><br><span class="line">K = (<span class="number">49293150360761418309411209621405185437426003792008480206387047056777011104939</span> : <span class="number">43598371886286324285673726736628847559547403221353820773139325027318579443479</span>)</span><br><span class="line">G = (<span class="number">34031022567935512558184471533035716554557378321289293120392294258731566673565</span> : <span class="number">74331715224220154299708533566163247663094029276428146274456519014761122295496</span>)</span><br><span class="line">私钥k小于<span class="number">1000000</span></span><br><span class="line">c1 = (<span class="number">3315847183153421424358678117707706758962521458183324187760613108746362414091</span> : <span class="number">61422809633368910312843316855658127170184420570309973276760547643460231548014</span>)</span><br><span class="line">c2 = (<span class="number">12838481482175070256758359669437500951915904121998959094172291545942862161864</span> : <span class="number">60841550842604234546787351747017749679783606696419878692095419214989669624971</span>)</span><br><span class="line">cipher_left = <span class="number">75142205156781095042041227504637709079517729950375899059488581605798510465939</span></span><br><span class="line">cipher_right = <span class="number">61560856815190247060747741878070276409743228362585436028144398174723191051815</span></span><br></pre></td></tr></table></figure>

<p>当时看到这道题的时候，这不就是个ecc的板子题嘛！只要再多搞个k爆破就可以出来了</p>
<p>但是我还是有点低估了这道题</p>
<p>p &#x3D; koZP3YQAklARRNrmYfjxoKIAXegOcG4jMOmKb08uESOkCCn72d6UM2NWgefYPEMq4EJ1M0jKaqt02Guo5Ubccjqg4QZaaHbScREx38UMLQKwG0LcDd8VFX1zkobc1ZQn4L3DhKQrgJZI55todgOdJuHN532bxScAvOF26gJyQclPtRHn3M6SHrRCEXzzmszd68PJlLB6HaabrRrCW9ZoAYSZetM5jDBtNCJLpR0CBZUUk3Oeh2MZQu2vk8DZ1QqNG49hlxGfawp1FXvAZPdMwixzkhEQnbCDcOKzYyT6BZF2Dfd940tazl7HNOswuIpLsqXQ2h56guGngMeYfMXEZV09fsB3TE0N934CLF8TbZnzFzEkOe8TPTK2mWPVSrgmbsGHnxgYWhaRQWg3yosgDfrEa5qfVl9De41PVtTw024gltovypMXK5XMhuhogs0EMN7hkLapLn6lMj</p>
<p>额，这p是什么东西？</p>
<p>尝试了很多种编码方式，就是解不出p，“p的格式为p&#x3D;{p}”也没看明白是什么意思</p>
<p>后面朋友把学长的脚本分享给了我，我发现我遗漏了一个很重要的点，就是椭圆曲线的方程：<br>$$<br>y^2&#x3D;x^3+ax+b mod p<br>$$<br>因为K和G都在曲线上，所以我们可以把K和G两个点代入到椭圆方程当中求kp<br>$$<br>k1p&#x3D;x_K^3+ax+b-y_K^2\ k2p&#x3D;x_G^3+ax+b-y_G^2<br>$$<br>然后在gcd(k1p,k2p)，最后就可以把p给求出来</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line">a=<span class="number">87425770561190618633288232353256495656281438408946725202136726983601884085917</span></span><br><span class="line">b=<span class="number">107879772066707091306779801409109036008421651378615140327877558014536331974777</span></span><br><span class="line">K = (<span class="number">49293150360761418309411209621405185437426003792008480206387047056777011104939</span> , <span class="number">43598371886286324285673726736628847559547403221353820773139325027318579443479</span>)</span><br><span class="line">G = (<span class="number">34031022567935512558184471533035716554557378321289293120392294258731566673565</span> , <span class="number">74331715224220154299708533566163247663094029276428146274456519014761122295496</span>)</span><br><span class="line">k1p=K[<span class="number">0</span>]**<span class="number">3</span>+a*K[<span class="number">0</span>]+b-K[<span class="number">1</span>]**<span class="number">2</span></span><br><span class="line">k2p=G[<span class="number">0</span>]**<span class="number">3</span>+a*G[<span class="number">0</span>]+b-G[<span class="number">1</span>]**<span class="number">2</span></span><br><span class="line">p=gcd(k1p,k2p)</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">c1=E([<span class="number">3315847183153421424358678117707706758962521458183324187760613108746362414091</span>,<span class="number">61422809633368910312843316855658127170184420570309973276760547643460231548014</span>])</span><br><span class="line">c2=E([<span class="number">12838481482175070256758359669437500951915904121998959094172291545942862161864</span>,<span class="number">60841550842604234546787351747017749679783606696419878692095419214989669624971</span>])</span><br><span class="line">cipher_left=<span class="number">75142205156781095042041227504637709079517729950375899059488581605798510465939</span></span><br><span class="line">cipher_right=<span class="number">61560856815190247060747741878070276409743228362585436028144398174723191051815</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">    m=c1-k*c2</span><br><span class="line">    left=cipher_left//m[<span class="number">0</span>]</span><br><span class="line">    right=cipher_right//m[<span class="number">1</span>]</span><br><span class="line">    M=long_to_bytes(<span class="built_in">int</span>(left))+long_to_bytes(<span class="built_in">int</span>(right))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span><span class="keyword">in</span> M:</span><br><span class="line">        <span class="built_in">print</span>(M)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="string">b&#x27;flag&#123;2d6a7e4e-02d3-11ef-8836-a4b1c1c5a2d2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>跑了挺长时间的，用虚拟机好像跑的快一点</p>
<h3 id="2-signatrue"><a href="#2-signatrue" class="headerlink" title="2.signatrue"></a>2.signatrue</h3><p>这道题因为是一道靶机题，就先分析一下解题思路，以后有环境了再复现一下：</p>
<p>附件：</p>
<p>server.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_proof_key</span>():</span><br><span class="line">    password = <span class="string">&#x27;happy_the_year_of_loong&#x27;</span></span><br><span class="line">    getin = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> password:</span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            getin += i.lower()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            getin += i.upper()</span><br><span class="line">    ans = hashlib.sha256(getin.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> getin,ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    pri = random.randint(<span class="number">2</span>,q - <span class="number">2</span>)</span><br><span class="line">    pub = <span class="built_in">pow</span>(g,pri,p)</span><br><span class="line">    <span class="keyword">return</span> pri,pub</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">m,pri</span>):</span><br><span class="line">    k = <span class="built_in">int</span>(hashlib.md5(os.urandom(<span class="number">20</span>)).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p) % q</span><br><span class="line">    s = <span class="built_in">pow</span>(k,-<span class="number">1</span>,q) * (H + pri * r) % q</span><br><span class="line">    <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">pub,m,signature</span>):</span><br><span class="line">    r,s = signature</span><br><span class="line">    <span class="keyword">if</span> r &lt;= <span class="number">0</span> <span class="keyword">or</span> r &gt;= q <span class="keyword">or</span> s &lt;= <span class="number">0</span> <span class="keyword">or</span> s &gt;= q:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    w = <span class="built_in">pow</span>(s,-<span class="number">1</span>,q)</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    u1 = H * w % q</span><br><span class="line">    u2 = r * w % q</span><br><span class="line">    v = (<span class="built_in">pow</span>(g,u1,p) * <span class="built_in">pow</span>(pub,u2,p) % p) % q</span><br><span class="line">    <span class="keyword">return</span> v == r</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello sir,Plz login first&#x27;</span>)</span><br><span class="line">    menu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    1.sign</span></span><br><span class="line"><span class="string">    2.verify</span></span><br><span class="line"><span class="string">    3.get my key</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    times = <span class="number">8</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(menu)</span><br><span class="line">        <span class="keyword">if</span> times &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Timeout!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt;&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">            name = <span class="built_in">input</span>(<span class="string">&#x27;Username:&#x27;</span>).encode()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;admin&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Get out!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            r,s = sign(name,pri)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;This is your signature -- &gt; <span class="subst">&#123;r&#125;</span>,<span class="subst">&#123;s&#125;</span>&#x27;</span>)</span><br><span class="line">            times -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Sure,Plz input your signature&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(pri)</span><br><span class="line">            r = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;r:&#x27;</span>))</span><br><span class="line">            s = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;s:&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> verify(pub,<span class="string">b&#x27;admin&#x27;</span>,(r,s)) == <span class="literal">True</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;login success!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;you are not admin&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Oh,your key is <span class="subst">&#123;(p,q,g)&#125;</span>&#x27;</span>)</span><br><span class="line">getin,ans = gen_proof_key()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Your gift --&gt; <span class="subst">&#123;ans[:<span class="number">6</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">your_token = <span class="built_in">input</span>(<span class="string">&#x27;Plz input your token\n&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> your_token != getin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Get out!&#x27;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">key = DSA.generate(<span class="number">1024</span>)</span><br><span class="line">p, q, g = key.p, key.q, key.g</span><br><span class="line">pri, pub = gen_key()</span><br><span class="line"><span class="keyword">if</span> login() == <span class="literal">False</span>:</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read())</span><br></pre></td></tr></table></figure>

<p>这道题是DSA+HNP的结合题，XCTF2020-高校战役-NHP和这道题较为类似，我们后面一起看看</p>
<p>我们粗略看一下这些代码块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    pri = random.randint(<span class="number">2</span>,q - <span class="number">2</span>)</span><br><span class="line">    pub = <span class="built_in">pow</span>(g,pri,p)</span><br><span class="line">    <span class="keyword">return</span> pri,pub</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">m,pri</span>):</span><br><span class="line">    k = <span class="built_in">int</span>(hashlib.md5(os.urandom(<span class="number">20</span>)).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p) % q</span><br><span class="line">    s = <span class="built_in">pow</span>(k,-<span class="number">1</span>,q) * (H + pri * r) % q</span><br><span class="line">    <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">pub,m,signature</span>):</span><br><span class="line">    r,s = signature</span><br><span class="line">    <span class="keyword">if</span> r &lt;= <span class="number">0</span> <span class="keyword">or</span> r &gt;= q <span class="keyword">or</span> s &lt;= <span class="number">0</span> <span class="keyword">or</span> s &gt;= q:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    w = <span class="built_in">pow</span>(s,-<span class="number">1</span>,q)</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    u1 = H * w % q</span><br><span class="line">    u2 = r * w % q</span><br><span class="line">    v = (<span class="built_in">pow</span>(g,u1,p) * <span class="built_in">pow</span>(pub,u2,p) % p) % q</span><br><span class="line">    <span class="keyword">return</span> v == r</span><br></pre></td></tr></table></figure>

<p>我们能够看得出，这里考察的是隐藏数问题（HNP &#x2F; Hidden Number Problem），用admin来检验签名</p>
<p>多次签名造格</p>
<p>（春秋杯是真的喜欢考DSA的知识啊，今年冬季赛也考了DSA）</p>
<p>我们有：<br>$$<br>s&#x3D;k^{-1}(H+xr)mod q 其中x为pri\ 求k\ k&#x3D;s^{-1}(H+xr)mod q\ 式子展开\ k&#x3D;Hs^{-1}+s^{-1}xr mod q\ 我们可以把s^{-1}r记作A，Hs^{-1}记作B\ 所以有：\ k&#x3D;A_ix+B_i mod q\ 然后就可以构造格\<br>$$<br>然后我们在login函数里发现times&#x3D;8，所以我们造格时i最大也为8</p>
<p>所以有：<br>$$<br>vM &#x3D; \begin{bmatrix} l_1 &amp; l_2 &amp; \cdots &amp; l_8 &amp; x &amp; 1 \end{bmatrix} \begin{bmatrix} q &amp; &amp; &amp; &amp; &amp; &amp; \newline &amp; q &amp; &amp; &amp; &amp; &amp; \newline &amp; &amp;\ddots&amp; &amp; &amp; &amp; \newline &amp; &amp; &amp; q &amp; &amp; &amp; \newline A_1&amp;A_2&amp;\dots &amp; A_8&amp;1&amp; &amp; \newline B_1&amp;B_2&amp;\dots &amp; B_8&amp; &amp; K &amp; \newline \end{bmatrix} &#x3D; \begin{bmatrix} k_1 &amp; k_2 &amp; \cdots &amp; k_8 &amp; x&amp; K \end{bmatrix} &#x3D; v_k<br>$$<br>把x,k求出来</p>
<p>然后我们来估算一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = <span class="built_in">int</span>(hashlib.md5(os.urandom(<span class="number">20</span>)).hexdigest(),<span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<p>通过这里的代码，我们可以估计k(K)的长度大概在32*4&#x3D;128bits左右</p>
<p>DSA通常使用 1024 比特的 <code>p</code> 和 160 比特的 <code>q</code>,所以q应该就是160比特长</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pri = random.randint(<span class="number">2</span>,q - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>x在（2，q-2）的范围内，所以x的长度和q应该也差不多，为160bits左右</p>
<p>然后估算造的这个格x的大小，大概在140.8bit左右，所以很明显小了，因为x至少都有160bits左右，所以这个格要重新造</p>
<p>HNP造格的一些其它思路：</p>
<p><a href="https://zhuanlan.zhihu.com/p/581146119">https://zhuanlan.zhihu.com/p/581146119</a></p>
<p>我们发现k小x大，所以我们可以先消去x：</p>
<p>（步骤简化了一些，详细步骤上面的博客里有）<br>$$<br>(r_0s_i)k_i-(r_is_0)k_0&#x3D;(r_0h_i-r_ih_0)mod q\</p>
<p>使ki的系数为1，然后乘上一个(r_0s_i)^{-1},就有：\</p>
<p>k_i-((r_is_0)(r_0s_i)^{-1})k_0&#x3D;((r_0h_i-r_ih_0)(r_0s_i)^{-1})mod q\</p>
<p>现在令：\</p>
<p>A_i&#x3D;((r_is_0)(r_0s_i)^{-1})\ B_i&#x3D;((r_0h_i-r_ih_0)(r_0s_i)^{-1})\</p>
<p>所以有： \</p>
<p>k_i&#x3D;A_ik_0+B_i(mod q)<br>$$<br>构造格：<br>$$<br>vM &#x3D; \begin{bmatrix} l_1 &amp; l_2 &amp; \cdots &amp; l_8 &amp; k_0&amp; 1 \end{bmatrix} \begin{bmatrix} q &amp; &amp; &amp; &amp; &amp; &amp; \newline &amp; q &amp; &amp; &amp; &amp; &amp; \newline &amp; &amp;\ddots&amp; &amp; &amp; &amp; \newline &amp; &amp; &amp; q &amp; &amp; &amp; \newline A_1&amp;A_2&amp;\dots &amp; A_8&amp;1&amp; &amp; \newline B_1&amp;B_2&amp;\dots &amp; B_8&amp; &amp; K &amp; \newline \end{bmatrix} &#x3D; \begin{bmatrix} k_1 &amp; k_2 &amp; \cdots &amp; k_8 &amp; k_0&amp; K \end{bmatrix} &#x3D; v_k<br>$$<br>求出k0之后，然后就可以解r和s</p>
<p>学完这道题，收获还是很大的</p>
<p>HNP也经常和LCG一起考察，到时候一并更新</p>
<p>*NPUCTF 2020 - babyLCG</p>
<p>*RCTF 2022 - IS_THIS_LCG</p>
<p>第一次尝试在自己的博客上记录自己的学习心得，还有很多不足之处，希望各位师傅批评指正！</p>
]]></content>
  </entry>
</search>
